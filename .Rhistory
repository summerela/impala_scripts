<<<<<<< HEAD
packrat::set_opts(external.packages = c(""))
library(RODBC)
install.packages("RODBC")
library(RODBC)
install.packages("RODBC",type = "source")
install.packages("RODBC",type = "source")
install.packages("RODBC",type = "source")
library(RODBC)
conn <- odbcConnect("Cloudera Impala DSN")
conn <- odbcConnect("Impala DSN")
conn <- odbcConnect("Impala DSN")
conn <- odbcConnect("Impala DSN")
conn <- odbcConnect("Impala DSN")
conn <- odbcConnect("Impala DSN")
conn <- odbcConnect("Impala DSN")
conn <- odbcConnect("Impala DSN")
conn <- odbcConnect("Impala DSN")
conn
df <- data.frame( name=c("John", "Adam"), date=c(3, 5) )
df
df[df$date>4 & df$date<6, ]
df <- data.frame( name=c("John", "Adam", "steve"), date=c(3, 5, 7) )
df[df$date>4 & df$date<6, ]
df[df$date<5 & df$date>6, ]
ensembl = sqlFetch(conn, "p7dev.sum_test")
library(RODBC)
conn <- odbcConnect("Impala DSN")
ensembl = sqlFetch(conn, "p7dev.sum_test")
head(ensembl)
dim(ensembl)
dim(ensembl[which(ensembl$vcf_chrom != ensembl$ens_chrom)])
vcf = sqlFetch(conn, "p7dev.sum_test")
head(vcf)
dim(vcf)
ensembl = sqlFetch(conn, "public_hg19.ensembl"")
ensembl = sqlFetch(conn, "public_hg19.ensembl")
ensembl = sqlFetch(conn, "public_hg19.ensembl")
ensembl = sqlFetch(conn, "public_hg19.ensembl_genes")
head(ensembl)
dim(ensembl)
chr_match = merge(vcf, ensembl, by=chromosome)
chr_match = merge(vcf, ensembl, by='chromosome')
library(data.table)
vcf_table = data.table(vcf)
ens_table  data.table(ens)
ens_table = data.table(ens)
ens_table = data.table(ensembl)
chr_match = merge(vcf_table, ens_table, by='chromosome')
head(vcf_table$chromosome)
head(ens_table$chromosome)
head(ens_table)
head(ensembl)
ens_results = read.csv("./queries/testing/query_result_ensembl.csv")
suppressMessages(library(RODBC))
conn <- odbcConnect("Impala DSN")
vcf = sqlFetch(conn, "p7dev.illumina_test")
head(vcf)
dim(vcf)
ens = sqlFetch(conn, "p7dev.ensembl_test")
head(ens)
dim(ens)
setwd("~/impala_scripts/queries/testing")
ens_results = read.csv("./query_result_ensembl.csv")
suppressMessages(library(GenomicRanges))
suppressMessages(library(IRanges))
##subset for only vcf rows that passed filtering
vcf_pass = vcf[which(vcf$filter == "PASS"),]
#create GRanges objects for comparison
=======
as.data.frame(ranges(vars))
colnames(as.data.frame(ranges(vars)))
match.df = data.frame(sample_id = as.character(mcols(vars)$sample_id)[queryHits(match)],
pos = as.data.frame(ranges(vars))$start,
variant = as.character(lapply(strsplit(as.character(names(vars)[queryHits(match)]), "_"), function(x) x[2])),
rsId = as.character(mcols(vars)$rsID)[queryHits(match)],
gene_name = names(genes)[subjectHits(match)],
#gene_id =
stringsAsFactors=F)
cbind(match.df, ranges(vars))
length(vars)
match.df = data.frame(sample_id = as.character(mcols(vars)$sample_id)[queryHits(match)],
pos = as.data.frame(ranges(vars))$start[queryHits(match)],
variant = as.character(lapply(strsplit(as.character(names(vars)[queryHits(match)]), "_"), function(x) x[2])),
rsId = as.character(mcols(vars)$rsID)[queryHits(match)],
gene_name = names(genes)[subjectHits(match)],
#gene_id =
stringsAsFactors=F)
head(match.df)
grep("103-00060-02", vcf_pass, value=TRUE)
grep("103-00060-02", vcf_pass$sample_id, value=TRUE)
vcf_pass[grep("103-00060-02", vcf_pass$sample_id, value=TRUE),]
head(vcf_pass)
head(match.df)
head(vars)
head(vcf_pass$sample_id)
>>>>>>> 0eef1bcd15a3f5185324dbdc2a05dd8a2ac79e4b
vars = with(vcf_pass, GRanges(seqnames=vcf_pass$chromosome,
ranges=IRanges(vcf_pass$pos, width=1,
names=paste(vcf_pass$sample_id, ":",vcf_pass$ref, ">", vcf_pass$alt, sep="")),rsID=vcf_pass$id, filter=vcf_pass$filter, qual=vcf_pass$qual, sample_id=vcf_pass$sample_id))
genes = with(ens, GRanges(seqnames=ens$chromosome,
ranges=IRanges(ens$start, ens$stop,names=ens$gene_id),
feature=ens$feature, trans_id=ens$transcript_id, gene_id=ens$gene_id, gene_name=ens$gene_name, trans_name=ens$transcript_name, exon=ens$exon_id))
##find variants that fall in gene regions
<<<<<<< HEAD
match = suppressWarnings(findOverlaps(vars, genes))
head(match)
=======
match = findOverlaps(vars, genes)
head(match)
head(vars)
variant = as.character(lapply(strsplit(as.character(names(vars)[queryHits(match)]), ":"), function(x) x[2]))
head(variant)
match.df = data.frame(sample_id = as.character(mcols(vars)$sample_id)[queryHits(match)],
pos = as.data.frame(ranges(vars))$start[queryHits(match)],
variant = as.character(lapply(strsplit(as.character(names(vars)[queryHits(match)]), ":"), function(x) x[2])),
rsId = as.character(mcols(vars)$rsID)[queryHits(match)],
gene_name = names(genes)[subjectHits(match)],
#gene_id =
stringsAsFactors=F)
head(match.df)
head(vars)
grep("103-00060-02", vcf_pass$sample_id)
grep("^103-00060-02$", vcf_pass$sample_id)
vcf_pass[grep("^103-00060-02$", vcf_pass$sample_id),]
head(vcf_pass)
head(match.df)
head(match.df, 50)
dim(match.df)
head(match.df)
match.df = data.frame(sample_id = as.character(mcols(vars)$sample_id)[queryHits(match)],
chrom = seqnames(vars)[queryHits(match)],
pos = as.data.frame(ranges(vars))$start[queryHits(match)],
variant = as.character(lapply(strsplit(as.character(names(vars)[queryHits(match)]), ":"), function(x) x[2])),
rsId = as.character(mcols(vars)$rsID)[queryHits(match)],
gene_name = names(genes)[subjectHits(match)],
#gene_id =
stringsAsFactors=F)
head(match.df)
head(vars)
head(genes)
head(names(genes))
match.df = data.frame(sample_id = as.character(mcols(vars)$sample_id)[queryHits(match)],
chrom = seqnames(vars)[queryHits(match)],
pos = as.data.frame(ranges(vars))$start[queryHits(match)],
variant = as.character(lapply(strsplit(as.character(names(vars)[queryHits(match)]), ":"), function(x) x[2])),
rsId = as.character(mcols(vars)$rsID)[queryHits(match)],
gene_id = names(genes)[subjectHits(match)],
gene_name = mcols(genes)$gene_id[subjectHits(match)],
stringsAsFactors=F)
head(match.df)
match.df = data.frame(sample_id = as.character(mcols(vars)$sample_id)[queryHits(match)],
chrom = seqnames(vars)[queryHits(match)],
pos = as.data.frame(ranges(vars))$start[queryHits(match)],
variant = as.character(lapply(strsplit(as.character(names(vars)[queryHits(match)]), ":"), function(x) x[2])),
rsId = as.character(mcols(vars)$rsID)[queryHits(match)],
gene_id = names(genes)[subjectHits(match)],
gene_name = mcols(genes)$gene_name[subjectHits(match)],
stringsAsFactors=F)
head(match.df)
head(genes)
>>>>>>> 0eef1bcd15a3f5185324dbdc2a05dd8a2ac79e4b
match.df = data.frame(sample_id = as.character(mcols(vars)$sample_id)[queryHits(match)],
chrom = seqnames(vars)[queryHits(match)],
pos = as.data.frame(ranges(vars))$start[queryHits(match)],
variant = as.character(lapply(strsplit(as.character(names(vars)[queryHits(match)]), ":"), function(x) x[2])),
rsId = as.character(mcols(vars)$rsID)[queryHits(match)],
gene_name = mcols(genes)$gene_name[subjectHits(match)],
gene_id = names(genes)[subjectHits(match)],
trans_name = mcols(genes)$trans_name[subjectHits(match)],
trans_id = mcols(genes)$trans_id[subjectHits(match)],
exon_id = mcols(genes)$exon[subjectHits(match)],
feature = mcols(genes)$feature[subjectHits(match)],
stringsAsFactors=F)
head(match.df)
<<<<<<< HEAD
dim(match.df)
ens_results$variant = paste(ens_results$vcf_ref, ">", ens_results$vcf_alt, sep="")
ens.df = ens_results[c(1,2,3,17,6,10,11,13,14,15,9)]
colnames(ens.df) = colnames(match.df)
head(ens.df)
ens.df = ens.df[with(ens.df, order(sample_id, chrom, pos, variant, gene_name, gene_id, trans_name, trans_id, exon_id, feature)),]
match.df = match.df[with(match.df, order(sample_id, chrom, pos, variant, gene_name, trans_name, trans_id, exon_id, feature)),]
i = sapply(ens.df, is.factor)
ens.df[i] = lapply(ens.df[i], as.character)
j = sapply(match.df, is.factor)
match.df[j] = lapply(match.df[i], as.character)
match.df[j] = lapply(match.df[j], as.character)
rownames(match.df)= NULL
rownames(ens.df) = NULL
ens.df$rsId = gsub("NULL", "NA", ens.df$rsId)
which(match.df != ens.df, arr.ind=TRUE)
match.df[,351]
match.df[351,]
ens.df[351,]
=======
str(match.df$featur)
str(match.df$feature)
mathc.df == ens_results
match.df == ens_results
dim(match.df)
dim(ensembl_results)
dim(ens_results)
colnames(ens_results)
colnames(match.df)
ens_results$variant = paste(ens_results$ref, ">", ens_results$alt, sep="")
head(ens_results)
ens_results$variant = paste(ens_results$vcf_ref, ">", ens_results$vcf_alt, sep="")
head(ens_results)
ens.df = ens_results[,c(ens_results$vcf_ref)]
head(ens.df)
ens.df = ens_results[,c(-ens_results$vcf_ref)]
ens.df = ens_results[,-c(ens_results$vcf_ref)]
head(ens.df)
colnames(ens_results)
ens.df = ens_results[,-c(4)]
colnames(ens.df)
ens.df = ens_results[,-c(4,5,7,8,16)]
colnames(ens.df)
head(vars)
colnames(match.df)
colnames(ens_results)
ens.df = ens_results[,c(1,2,3,17,6,10,11,13,14,15)]
colnames(ens.df) = colnames(match.df)
dim(ens.df)
dim(match.df)
ens.df = ens_results[,c(1,2,3,17,6,10,11,13,14,15,9)]
colnames(ens.df) = colnames(match.df)
ens.df == match.df
dim(ens.df)
dim(match.df)
library(compare)
compare(match.df, ens.df, equal=TRUE)
compare(match.df, ens.df, equal=TRUE, ignore.case=TRUE)
compare(match.df, ens.df, equal=TRUE, allowAll=TRUE)
head(match.df)
head(ens.df)
?orderby
?order
?sort
?order
?sort
ens.df = ens.df[with(ens.df, order(sample_id)]
ens.df = ens.df[with(ens.df, order(sample_id)),]
head(ens.df)
match.df = match.df[with(match.df, order(sample(id))),]
match.df = match.df[with(match.df, order(sample_id)),]
head(match.df)
compare(match.df, ens.df, equal=TRUE, allowAll=TRUE)
diff(match.df, ens.df)
match.df = ens.df
match.df == ens.df
>>>>>>> 0eef1bcd15a3f5185324dbdc2a05dd8a2ac79e4b
match.df = data.frame(sample_id = as.character(mcols(vars)$sample_id)[queryHits(match)],
chrom = seqnames(vars)[queryHits(match)],
pos = as.data.frame(ranges(vars))$start[queryHits(match)],
variant = as.character(lapply(strsplit(as.character(names(vars)[queryHits(match)]), ":"), function(x) x[2])),
rsId = as.character(mcols(vars)$rsID)[queryHits(match)],
gene_name = mcols(genes)$gene_name[subjectHits(match)],
gene_id = names(genes)[subjectHits(match)],
trans_name = mcols(genes)$trans_name[subjectHits(match)],
trans_id = mcols(genes)$trans_id[subjectHits(match)],
exon_id = mcols(genes)$exon[subjectHits(match)],
feature = mcols(genes)$feature[subjectHits(match)],
stringsAsFactors=F)
<<<<<<< HEAD
#450 rows, same as impala query
head(match.df)
dim(match.df)
match.df = match.df[with(match.df, order(sample_id, chrom, pos, variant, gene_name, trans_name, trans_id, exon_id, feature)),]
head(match.df)
j = sapply(match.df, is.factor)
match.df[j] = lapply(match.df[j], as.character)
head(match.df)
match.df[351,]
rownames(match.df)= NULL
rownames(ens.df) = NULL
match.df[351,]
ens.df$rsId = gsub("NULL", "NA", ens.df$rsId)
which(match.df != ens.df, arr.ind=TRUE)
which(rand_match != match_imp_results, arr.ind=TRUE)
rand_match
rand_match = match.df[(match.df$gene_name %in% rand_genes),]
rand_genes = sample(unique(match.df$gene_name), 5)
rand_genes
rand_genes = c("RMRPP1","PPIAP13","NDST2","RP11-574K11.8","RPL39P25")
rand_match = match.df[(match.df$gene_name %in% rand_genes),]
dim(rand_match)
rand_match
match_imp_results = ens.df[(ens.df$gene_name %in% rand_genes),]
dim(match_imp_results)
match_imp_results
which(rand_match != match_imp_results, arr.ind=TRUE)
conn <- odbcConnect("Impala DSN")
vcf = sqlFetch(conn, "p7dev.illumina_test")
head(vcf)
intergenic_csv = read.csv("./ensembl/intergenic_test.csv", sep="\t")
head(intergenic_csv)
intergenic_csv = read.csv("./ensembl/intergenic_test.csv", header=TRUE)
head(intergenic_csv)
intergenic_csv = intergenic_csv[,c(1:8)]
head(intergenic_csv)
rand_intergenic = sample(unique(intergenic_csv), 5)
rand_intergenic
head(intergenic_csv)
rand_intergenic = sample(unique(c(intergenic_csv$chromosome, intergenic_csv$position)), 5)
rand_intergenic
rand_intergenic = sample(unique(c(intergenic$sample_id)), 5)
rand_intergenic = sample(unique(c(intergenic_csv$sample_id)), 5)
rand_intergenic
rand_intergenic = intergenic_csv[sample(unique(c(intergenic_csv$sample_id)), 5),]
rand_intergenic
ens_results = read.csv("./ensembl/query_result_ensembl.csv")
ens_results = read.csv("../testing/ensembl/")
ens_results = read.csv("./ensembl/ensembl_query_result.csv")
setwd("~/impala_scripts/queries")
ens_results = read.csv("./ensembl/ensembl_query_result.csv")
ens_results = read.csv("./testing/ensembl/ensembl_query_result.csv", header=TRUE)
head(ens_results)
ens_results = read.csv("~/impala_scripts/queries/testing/ensembl/ensembl_query_result.csv", header=TRUE)
head(ens_results)
intergenic_csv = read.csv("~/impala_scripts/queries/testing/ensembl/intergenic_test.csv", header=TRUE)
head(intergenic_csv)
setwd("~/impala_scripts/queries/testing")
ucsc_results = read.csv("./ucsc//ucsc_query_result.csv", header=TRUE)
head(ucsc_results)
dim(ucsc_results)
suppressMessages(library(RODBC))
conn <- odbcConnect("Impala DSN")
vcf = sqlFetch(conn, "p7dev.illumina_test")
ucsc = sqlFetch(conn, "public_hg19.ucsc")
head(ucsc)
dim(ucsc)
head(vcf)
dim(vcf)
suppressMessages(library(GenomicRanges))
suppressMessages(library(IRanges))
=======
match.df = match.df[with(match.df, order(sample_id)),]
match.df == ens.df
lapply(match.df, class)
lapply(ens.df, class)
classy.df = data.frame(matches = lapply(match.df, class),
ens_results=lapply(ens.df, class))
classy.df
matches = lapply(match.df, class)
ens_results=lapply(ens.df, class))
ens_results=lapply(ens.df, class)
matches
head(ens.df)
lapply(match.df, class)
lapply(ens.df, class)
ens.df$sample_id = as.character(ens.df$sample_id)
head(ens.df)
match.df$chrom = as.character(match.df$chrom)
ens.df$chrom = as.character(ens.df$chrom)
ens.df$rsID = as.character(ens.df$rsID)
head(ens.df$rsID)
head(ens.df)
ens.df$rsId = as.character(ens.df$rsId)
head(ens.df)
match.df$gene_name = as.character(match.df$gene_name)
lapply(match.df, as.character)
match.df = lapply(match.df, as.character)
head(match.df)
match.df = data.frame(lapply(match.df, as.character))
head(match.df)
ens.df = data.frame(lapply(ens.df, as.character))
head(ens.df)
lapply(match.df, class)
lapply(ens.df, class)
match.df == ens.df
match.df = data.frame(sample_id = as.character(mcols(vars)$sample_id)[queryHits(match)],
chrom = seqnames(vars)[queryHits(match)],
pos = as.data.frame(ranges(vars))$start[queryHits(match)],
variant = as.character(lapply(strsplit(as.character(names(vars)[queryHits(match)]), ":"), function(x) x[2])),
rsId = as.character(mcols(vars)$rsID)[queryHits(match)],
gene_name = mcols(genes)$gene_name[subjectHits(match)],
gene_id = names(genes)[subjectHits(match)],
trans_name = mcols(genes)$trans_name[subjectHits(match)],
trans_id = mcols(genes)$trans_id[subjectHits(match)],
exon_id = mcols(genes)$exon[subjectHits(match)],
feature = mcols(genes)$feature[subjectHits(match)],
stringsAsFactors=F)
#add variant column to impala results
ens_results$variant = paste(ens_results$vcf_ref, ">", ens_results$vcf_alt, sep="")
#coerce to same structure as match.df for comparison
ens.df = ens_results[,c(1,2,3,17,6,10,11,13,14,15,9)]
colnames(ens.df) = colnames(match.df)
head(ens.df)
ens.df = ens_results[c(1,2,3,17,6,10,11,13,14,15,9)]
colnames(ens.df) = colnames(match.df)
head(ens.df)
ens = sqlFetch(conn, "p7dev.ensembl_test")
ens = sqlFetch(conn, "p7dev.ensembl_test")
>>>>>>> 0eef1bcd15a3f5185324dbdc2a05dd8a2ac79e4b
##subset for only vcf rows that passed filtering
vcf_pass = vcf[which(vcf$filter == "PASS"),]
#create GRanges objects for comparison
vars = with(vcf_pass, GRanges(seqnames=vcf_pass$chromosome,
ranges=IRanges(vcf_pass$pos, width=1,
names=paste(vcf_pass$sample_id, ":",vcf_pass$ref, ">", vcf_pass$alt, sep="")),rsID=vcf_pass$id, filter=vcf_pass$filter, qual=vcf_pass$qual, sample_id=vcf_pass$sample_id))
<<<<<<< HEAD
genes = with(ucsc, GRanges(seqnames=ucsc$chrom,
ranges=IRanges(ucsc$txstart, ucsc$txend,names=ucsc$name),
proteinid=ucsc$proteinid, alignid=ucsc$alignid))
match = suppressWarnings(findOverlaps(vars, genes))
match
head(vars)
head(genes)
gsub("chr", "", ucsc$chrom)
genes = with(ucsc, GRanges(seqnames=as.character(gsub("chr", "", ucsc$chrom)),
ranges=IRanges(ucsc$txstart, ucsc$txend,names=ucsc$name),
proteinid=ucsc$proteinid, alignid=ucsc$alignid))
head(genes)
match = suppressWarnings(findOverlaps(vars, genes))
match
head(mcols(genes))
head(genes)
rownames(genes)
class(genes)
names(genes)
gene_name = as.character(names(genes))[subjectHits(match)]
head(gene_name)
genes = with(ucsc, GRanges(seqnames=as.character(gsub("chr", "", ucsc$chrom)),
ranges=IRanges(ucsc$txstart, ucsc$txend,names=ucsc$name),
proteinid=ucsc$proteinid))
##find variants that fall in gene regions
match = suppressWarnings(findOverlaps(vars, genes))
=======
genes = with(ens, GRanges(seqnames=ens$chromosome,
ranges=IRanges(ens$start, ens$stop,names=ens$gene_id),
feature=ens$feature, trans_id=ens$transcript_id, gene_id=ens$gene_id, gene_name=ens$gene_name, trans_name=ens$transcript_name, exon=ens$exon_id))
##find variants that fall in gene regions
match = findOverlaps(vars, genes)
>>>>>>> 0eef1bcd15a3f5185324dbdc2a05dd8a2ac79e4b
##turn results into a data frame
match.df = data.frame(sample_id = as.character(mcols(vars)$sample_id)[queryHits(match)],
chrom = seqnames(vars)[queryHits(match)],
pos = as.data.frame(ranges(vars))$start[queryHits(match)],
variant = as.character(lapply(strsplit(as.character(names(vars)[queryHits(match)]), ":"), function(x) x[2])),
rsId = as.character(mcols(vars)$rsID)[queryHits(match)],
<<<<<<< HEAD
gene_name = as.character(names(genes))[subjectHits(match)],
protein_id = mcols(genes)$proteinid[subjectHits(match)],
stringsAsFactors=F)
#450 rows, same as impala query
dim(match.df)
head(match.df)
head(ucsc_results)
ucsc_results$variant = paste(ucsc_results$vcf_ref, ">", ucsc_results$vcf_alt, sep="")
head(ucsc_results)
head(match.df)
dim(ucsc.df)
dim(ucsc_results)
head(ucsc_results)
head(match.df)
ucsc.df = ucsc_results[c(1,2,3,17,6,10,11,13,14,15,9)]
colnames(ucsc.df) = colnames(match.df)
ucsc_results = read.csv("./ucsc/ucsc_query_result.csv", header=TRUE)
head(ucsc_results)
dim(ucsc_results)
ucsc_results$variant = paste(ucsc_results$vcf_ref, ">", ucsc_results$vcf_alt, sep="")
head(ucsc_results)[14]
ucsc.df = ucsc_results[c(1,2,3,15,14,6,7,)]
colnames(match.df)
colnames(ucsc.df)
colnames(ucsc_results)
ucsc.df = ucsc_results[c(1,2,3,16,6,7,14)]
head(ucsc.df)
colnames(ucsc.df) = colnames(match.df)
head(ucsc.df)
head(match.df)
ucsc.df = ucsc.df[with(ucsc.df, order(sample_id, chrom, pos, variant, gene_name, gene_id, trans_name, trans_id, exon_id, feature)),]
ucsc.df = ucsc.df[with(ucsc.df, order(sample_id, chrom, pos, variant, gene_name)),]
match.df = match.df[with(match.df, order(sample_id, chrom, pos, variant, gene_name)),]
i = sapply(ucsc.df, is.factor)
ucsc.df[i] = lapply(ucsc.df[i], as.character)
j = sapply(match.df, is.factor)
match.df[j] = lapply(match.df[j], as.character)
head(match.df)
head(ucsc.df)
rownames(match.df)= NULL
rownames(ucsc.df) = NULL
head(ucsc.df$rsId, 50)
head(ucsc.df$rsId, 500)
which(match.df != ucsc.df, arr.ind=TRUE)
head(ucsc.df)
dim(ucsc.df)
unique(ucsc.df$protein_id)
length(unique(ucsc.df$protein_id))
str(ucsc_results$proteinid)
str(ucsc_results$ucsc_proteinid)
rand_genes = sample(ucscque(match.df$gene_name), 5)
rand_genes = sample(unique(match.df$gene_name), 5)
rand_genes
rand_genes = c(uc031qze.1","uc004dhp.3","uc003wvt.4","uc021ujc.2","uc003llx.3")
rand_genes = c("uc031qze.1","uc004dhp.3","uc003wvt.4","uc021ujc.2","uc003llx.3")
rand_genes
rand_match = match.df[(match.df$gene_name %in% rand_genes),]
dim(rand_match)
rand_match
head(rand_match)
head(match.df)
head(ucsc.df$gene_name)
match_imp_results = ucsc.df[(ucsc.df$gene_name %in% rand_genes),]
dim(match_imp_results)
dim(rand_match)
which(rand_match != match_imp_results, arr.ind=TRUE)
ucsc_results = read.csv("~//impala_scripts/ucsc/ucsc_query_result.csv", header=TRUE)
ucsc_results = read.csv("~//impala_scripts/queries/testing/ucsc/ucsc_query_result.csv", header=TRUE)
intergenics = read.csv("~/impala_scripts/queries/testing/ucsc/intergenic_query_result.csv", header=TRUE)
head(intergenics)
intergenics$id = paste(intergenics$sample_id, intergenics$chromosome, intergenics$position, intergenics$id, sep="_")
head(ucsc_results)
head(match.df)
match.df$id = paste(match.df$sample_id, match.df$chrom, match.df$pos, match.df$rsId)
head(match.df$id)
match.df$id = paste(match.df$sample_id, match.df$chrom, match.df$pos, match.df$rsId, sep="_")
head(match.df$id)
head(intergenics$id)
head(vars)
as.character(mcols(vars)$sample_id)[queryHits(match)]
head(as.character(mcols(vars)$sample_id)[queryHits(match)])
head(as.character(mcols(vars)$sample_id)[queryHits(match)], 50)
match.df = data.frame(sample_id = as.character(mcols(vars)$sample_id)[queryHits(match)],
chrom = seqnames(vars)[queryHits(match)],
pos = as.data.frame(ranges(vars))$start[queryHits(match)],
variant = as.character(lapply(strsplit(as.character(names(vars)[queryHits(match)]), ":"), function(x) x[2])),
rsId = as.character(mcols(vars)$rsID)[queryHits(match)],
gene_name = as.character(names(genes))[subjectHits(match)],
protein_id = mcols(genes)$proteinid[subjectHits(match)],
stringsAsFactors=F)
head(match.df)
match.df = match.df[with(match.df, order(sample_id, chrom, pos, variant, gene_name)),]
head(as.character(mcols(vars)$sample_id)[queryHits(match)], 50)
match.df = match.df[with(match.df, order(sample_id, chrom, pos, variant, gene_name)),]
head(match.df)
grep("101-371-M", mcols(vars)$sample_id)
head(match.df$id)
head(intergenics$id)
match.df$id = paste(match.df$sample_id, match.df$chrom, match.df$pos, match.df$rsId, sep="_")
j = sapply(match.df, is.factor)
match.df[j] = lapply(match.df[j], as.character)
rownames(match.df)= NULL
match.df$id %in% intergenics$id
intergenics[(match.df$id %in% intergenics$id,]
intergenics[(match.df$id %in% intergenics$id,)]
intergenics[which(match.df$id %in% intergenics$id,)]
intergenics[which(match.df$id %in% intergenics$id),]
match.df[which(intergenics$id %in% match.df$id),]
setwd("~/impala_scripts")
vcf_in = "./LP6008020-DNA_D03.genome.vcf.gz"
info_out = "~/impala_scripts/"
get_info = function(vcf){
#examine vcf header to grab info fields
hdr =  scanVcfHeader(vcf)
#build data frame from info fields
info = data.frame(field = rownames(info(hdr)), type="STRING", comment="COMMENT", description = paste("'", info(hdr)$Description, "'", sep=""))
##write info to a file for db_def
write.table(info, paste(info_out, paste(lapply(strsplit(basename(vcf), "[.]"), function(x) x[1]), "info", sep="_"), ".txt", sep=""),
quote=FALSE, row.names=FALSE, col.names=FALSE)
}
get_info(vcf_in)
###################
library(VariantAnnotation)
get_info = function(vcf){
#examine vcf header to grab info fields
hdr =  scanVcfHeader(vcf)
#build data frame from info fields
info = data.frame(field = rownames(info(hdr)), type="STRING", comment="COMMENT", description = paste("'", info(hdr)$Description, "'", sep=""))
##write info to a file for db_def
write.table(info, paste(info_out, paste(lapply(strsplit(basename(vcf), "[.]"), function(x) x[1]), "info", sep="_"), ".txt", sep=""),
quote=FALSE, row.names=FALSE, col.names=FALSE)
}
get_info(vcf_in)
=======
gene_name = mcols(genes)$gene_name[subjectHits(match)],
gene_id = names(genes)[subjectHits(match)],
trans_name = mcols(genes)$trans_name[subjectHits(match)],
trans_id = mcols(genes)$trans_id[subjectHits(match)],
exon_id = mcols(genes)$exon[subjectHits(match)],
feature = mcols(genes)$feature[subjectHits(match)],
stringsAsFactors=F)
#450 rows, same as impala query
head(match.df)
dim(match.df)
#add variant column to impala results
ens_results$variant = paste(ens_results$vcf_ref, ">", ens_results$vcf_alt, sep="")
#coerce to same structure as match.df for comparison
ens.df = ens_results[c(1,2,3,17,6,10,11,13,14,15,9)]
colnames(ens.df) = colnames(match.df)
head(ens.df)
head(ens_results)
ens_results = read.csv("./queries/testing//query_result_ensembl.csv")
ens_results = read.csv("./queries/testing/query_result_ensembl.csv")
setwd("~/GitHub/impala_annot/impala_scripts/queries/testing")
ens_results = read.csv("./queries/testing/query_result_ensembl.csv")
ens_results = read.csv("./queries/testing/query_result_ensembl.csv.csv")
ens_results = read.csv("./query_result_ensembl.csv.csv")
ens_results$variant = paste(ens_results$vcf_ref, ">", ens_results$vcf_alt, sep="")
#coerce to same structure as match.df for comparison
ens.df = ens_results[c(1,2,3,17,6,10,11,13,14,15,9)]
colnames(ens.df) = colnames(match.df)
ens.df = ens.df[with(ens.df, order(sample_id)),]
match.df = match.df[with(match.df, order(sample_id)),]
lapply(match.df, class)
lapply(ens.df, class)
ens.df$sample_id = as.character(ens.df$sample_id)
lapply(match.df, class)
head(ens.df)
match.df$chrom = as.character(match.df$chrom)
lapply(match.df, class)
head(match.df)
ens.df$chrom = as.character(ens.df$chrom)
head(ens.df)
ens.df$rsId = as.character(ens.df$rsId)
head(ens.df)
ens.df$gene_id = as.character(ens.df$gene_id)
head(ens.df)
match.df == ens.df
lapply(match.df, class)
lapply(ens.df, class)
match.df$gene_name = as.character(match.df$gene_name)
head(match.df)
ens.df$gene_name = as.character(ens.df$gene_name)
head(ens.df)
match.df$trans_name = as.character(match.df$trans_name)
ens.df$trans_name = as.character(ens.df$trans_name)
match.df$trans_id = as.character(match.df$trans_id)
ens.df$trans_id = as.character(ens.df$trans_id)
match.df$exon_id = as.character(match.df$exon_id)
ens.df$exon_id = as.character(ens.df$exon_id)
match.df$feature = as.character(match.df$feature)
ens.df$feature = as.character(ens.df$feature)
head(match.df)
head(ens.df)
lapply(match.df, class)
lapply(ens.df, class)
match.df == ens.df
which(match.df != ens.df)
match.df[which(match.df != ens.df),]
ens.df[which(match.df != ens.df),]
na.omit(ens.df[which(match.df != ens.df),])
rownames(match.df)
rownames(match.df)= NULL
rownames(ens.df) = NULL
na.omit(ens.df[which(match.df != ens.df),])
all.equal(match.df, ens.df)
which(match.df != ens.df)
na.omit(match.df[which(match.df != ens.df),])
all.equal(match.df, ens.df)
na.omit(all.equal(match.df, ens.df))
which(match.df != ens.df, arr.ind=TRUE)
head(which(match.df != ens.df, arr.ind=TRUE))
match.df[,268]
match.df[268]
match.df[268,]
ens.df[268,]
head(which(match.df != ens.df, arr.ind=TRUE))
match.df[272,]
ens.df[272,]
ens.df = ens.df[with(ens.df, order(sample_id, chrom, pos, variant, gene_name)),]
match.df = match.df[with(match.df, order(sample_id, chrom, pos, variant, gene_name)),]
lapply(match.df, class)
lapply(ens.df, class)
head(which(match.df != ens.df, arr.ind=TRUE))
match.df[6,]
ens.df[6,]
which(match.df != ens.df, arr.ind=TRUE)
match.df[6,]
ens.df[6,]
ens.df = ens.df[with(ens.df, order(sample_id, chrom, pos, variant, gene_name, gene_id, trans_name, trans_id, exon_id, feature)),]
match.df = match.df[with(match.df, order(sample_id, chrom, pos, variant, gene_name, trans_name, trans_id, exon_id, feature)),]
which(match.df != ens.df, arr.ind=TRUE)
match.df == ens.df
head(match.df)
head(ens.df)
ens.df = gsub("NULL", "NA", ens.df$rsId)
head(ens.df)
ens.df = ens_results[c(1,2,3,17,6,10,11,13,14,15,9)]
colnames(ens.df) = colnames(match.df)
ens.df = ens.df[with(ens.df, order(sample_id, chrom, pos, variant, gene_name, gene_id, trans_name, trans_id, exon_id, feature)),]
ens.df$sample_id = as.character(ens.df$sample_id)
match.df$chrom = as.character(match.df$chrom)
ens.df$chrom = as.character(ens.df$chrom)
ens.df$rsId = as.character(ens.df$rsId)
ens.df$gene_id = as.character(ens.df$gene_id)
match.df$gene_name = as.character(match.df$gene_name)
ens.df$gene_name = as.character(ens.df$gene_name)
match.df$trans_name = as.character(match.df$trans_name)
ens.df$trans_name = as.character(ens.df$trans_name)
match.df$trans_id = as.character(match.df$trans_id)
ens.df$trans_id = as.character(ens.df$trans_id)
match.df$exon_id = as.character(match.df$exon_id)
ens.df$exon_id = as.character(ens.df$exon_id)
match.df$feature = as.character(match.df$feature)
ens.df$feature = as.character(ens.df$feature)
rownames(match.df)= NULL
rownames(ens.df) = NULL
lapply(match.df, class)
lapply(ens.df, class)
head(ens.df)
ens.df$rsId = gsub("NULL", "NA", ens.df$rsId)
head(ens.df)
which(match.df != ens.df, arr.ind=TRUE)
match.df == ens.df
str(ens_results$feature)
str(match.df$feature)
levels(match.df$feature)
unique(match.df$feature)
conn <- odbcConnect("Impala DSN")
match = suppressWarnings(findOverlaps(vars, genes))
head(match)
head(unique(match.df$gene_name))
random(unique(match.df$gene_name), 5)
sample(unique(match.df$gene_name), 5)
test.df = ens.df
class(ens.df)
lapply(ens.df, class)
lapply(test.df, class)
source('~/.active-rstudio-document', echo=TRUE)
coerce(test.df)
lapply(test.df, coerce)
to_char = function(col){
if (class(col) != "INT"){
col = as.character(col)
}
}
test.df = ens.df
lapply(test.df, to_char)
testing = lapply(test.df, to_char)
head(testing)
testing = data.frame(lapply(test.df, to_char))
head(testing)
dim(testing)
lapply(testing, class)
lapply(ens.df, class)
to_char = function(col){
if (class(col) != "integer"){
col = as.character(col)
}
}
test.df = ens.df
test.df = ens.dflapply(.df, class)
testing = data.frame(lapply(test.df, to_char))
to_char = function(x){
if (class(x) != "integer"){
lapply(x, as.character)
}
}
test.df = ens.df
testing = data.frame(lapply(test.df, to_char))
testing = to_char(test.df)
head(testing)
testing = data.frame(to_char(test.df))
head(testing)
lapply(testing, class)
head(test.df)
test.df = ens.df
i <- sapply(test.df, is.factor)
bob[i] <- lapply(test.df[i], as.character)
test.df[i] <- lapply(test.df[i], as.character)
head(test.df)
lapply(test.df, class)
j = sapply(match.df, is.factor)
match.df[j] = lapply(match.df[i], as.character)
head(match.df)
lapply(class, match.df)
lapply(match.df, class)
rownames(match.df)= NULL
rownames(ens.df) = NULL
ens.df$rsId = gsub("NULL", "NA", ens.df$rsId)
which(match.df != ens.df, arr.ind=TRUE)
sample(unique(match.df$gene_name), 5)
rand_genes = sample(unique(match.df$gene_name), 5)
rand_genes
rand_genes
match.df[which(match.df$gene_name %in% rand_genes),]
match.df[match(match.df$gene_name, rand_genes),]
match.df[(rand_genes %in% match.df$gene_name),]
match.df[(match.df$gene_name %in% rand_genes),]
dim(match.df[(match.df$gene_name %in% rand_genes),])
match.df[(match.df$gene_name %in% rand_genes),]
rand_genes
dim(rand_match)
rand_match = match.df[(match.df$gene_name %in% rand_genes),]
dim(rand_match)
rand_match
ens.df
match_imp_results = ens.df[(ens.df$gene_name %in% rand_genes),]
dim(match_imp_results)
match_imp_results
which(rand_match != match_imp_results, arr.ind=TRUE)
rand_genes
rand_gene_impala = read.table("./rand_gene_query.xls")
rand_gene_impala = read.table("./rand_gene_query.xls", sep="\t")
rand_gene_impala = read.table("./rand_gene_query.txt, sep="\t")
rand_gene_impala = read.table("./rand_gene_query.txt", sep="\t")
head(rand_gene_impala)
rand_gene_impala = read.table("./rand_gene_query.txt", sep="\t", header=TRUE)
head(rand_gene_impala)
colnames(rand_gene_impala) = colnames(match_imp_results)
rownames(rand_gene_impala) = NULL
head(rand_gene_impala)
which(rand_match != rand_gene_impala, arr.ind=TRUE)
dim(rand_match)
dim(rand_gene_impala)
rand_gene_impala = read.table("./rand_gene_query.txt", sep="\t", header=TRUE)
rand_gene_impala$variant = paste(rand_gene_impala$ref, ">", rand_gene_impala$alt, sep="")
head(rand_gene_impala)
rand_gene_impala.test = rand_gene_impala[,c(1:3,13,6:12)]
dim(rand_gene_impala.test)
dim(rand_genes)
dim(rand_match)
rand_gene_impala = rand_gene_impala[,c(1:3,13,6:12)]
colnames(rand_gene_impala) = colnames(match_imp_results)
rownames(rand_gene_impala) = NULL
head(rand_gene_impala)
which(rand_match != rand_gene_impala, arr.ind=TRUE)
lapply(rand_gene_impala, class)
k = sapply(rand_gene_impala, is.factor)
rand_gene_impala[k] = lapply(rand_gene_impala[k], as.character)
which(rand_match != rand_gene_impala, arr.ind=TRUE)
match_imp_results
rand_gene_impala = rand_gene_impala[with(rand_gene_impala, order(sample_id, chrom, pos, variant, gene_name, trans_name, trans_id, exon_id, feature)),]
which(rand_match != rand_gene_impala, arr.ind=TRUE)
lapply(rand_gene_impala, class)
head(vcf_pass)
head(match.df)
vcf_pass[!which(match.df$sample_id %in% vcf_pass$sample_id)]
class(vcf_pass$sample_id)
vcf_pass[!which(as.character(match.df$sample_id) %in% vcf_pass$sample_id)]
class(match.df$sample_id)
vcf_pass[!which(match.df$sample_id %in% as.character(vcf_pass$sample_id)),]
vcf_pass[!which(as.character(vcf_pass$sample_id) %in% match.df$sample_id),]
head(match.df$sample_id)
head(vcf_pass$sample_id)
head(as.character(vcf_pass$sample_id))
head(as.character(match.df$sample_id))
vcf_pass[!which(as.character(vcf_pass$sample_id) %in% as.character(match.df$sample_id)),]
vcf_pass[which(as.character(vcf_pass$sample_id) %in% as.character(match.df$sample_id)),]
head(rownames(vcf_pass))
rand_genes
which(rand_match != match_imp_results, arr.ind=TRUE)
dim(rand_match)
dim(match_imp_results)
which(rand_match != match_imp_results, arr.ind=TRUE)
>>>>>>> 0eef1bcd15a3f5185324dbdc2a05dd8a2ac79e4b
