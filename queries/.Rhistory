strsplit(as.numeric(blood.df[2]), " ")
as.character(blood.df[1])
blood = read.table("./FeatureMatrix/features/Study_101_Mother_Blood_Collection_Times_sum.txt", sep="\t",
header=TRUE, check.names=FALSE, as.is=TRUE)
blood.df = data.frame(blood)
as.character(blood.df[1])
as.character(blood.df[2])
strsplit(blood.df[2], " ")
strsplit(as.character(blood.df[2]), " ")
test = lapply(strsplit(as.character(blood.df), " "), function(x) x[2])
test
blood.df$draw_time = lapply(strsplit(as.character(blood.df), " "), function(x) x[2])
colnames(blood.df)
blood.df$draw_time = sapply(strsplit(as.character(blood.df), " "), function(x) x[2])
blood.df$draw_time = mapply(strsplit(as.character(blood.df), " "), function(x) x[2])
test = sapply(blood.df, function(x) lapply(strsplit(as.character(blood.df), " ") )
test = sapply(blood.df, function(x) lapply(strsplit(as.character(blood.df), " ") ))
test = sapply(blood.df, function(x) lapply(strsplit(as.character(blood.df), " ") ))
test = sapply(blood.df, function(x) strsplit(as.character(blood.df), " ") ))
test = sapply(blood.df, function(x) strsplit(as.character(blood.df), " ") )
test
blood.df$draw_time = unlist(lapply(strsplit(as.character(blood.df), " "), function(x) x[2]))
blood.df$draw_time = as.character(lapply(strsplit(as.character(blood.df), " "), function(x) x[2])))
blood.df$draw_time = as.character(lapply(strsplit(as.character(blood.df), " "), function(x) x[2]))
blood.df$draw_time = unlist(lapply(strsplit(as.character(blood.df), " "), function(x) x[2]))
blood.df$draw_time = lapply(strsplit(unlist(as.character(blood.df)), " "), function(x) x[2])
library(stringr)
lapply(strsplit(as.character(blood.df), " "), function(x) x[2])
dim(lapply(strsplit(as.character(blood.df), " "), function(x) x[2]))
length(lapply(strsplit(as.character(blood.df), " "), function(x) x[2]))
dim(blood.df)
unlist(lapply(strsplit(as.character(blood.df), " "), function(x) x[2]))
blood.df$times = unlist(lapply(strsplit(as.character(blood.df), " "), function(x) x[2]))
blood_draw_times.df = data.frame(lapply(strsplit(as.character(blood.df), " "), function(x) x[2]))
head(blood_draw_times)
head(blood_draw_times.df)
blood_draw_times.df
colnames(blood_draw_times.df)
colnames(blood_draw_times.df) = colnames(blood.df)
head(blood.df)
blood = read.csf("./FeatureMatrix/features/Study_101_Mother_Blood_Collection_Times_sum.txt", sep="\t",
header=TRUE, check.names=FALSE, as.is=TRUE)
blood = read.csv("./FeatureMatrix/features/Study_101_Mother_Blood_Collection_Times_sum.txt", sep="\t",
header=TRUE, check.names=FALSE, as.is=TRUE)
blood.df = data.frame(blood)
colnames(blood.df)
blood = read.csv("./FeatureMatrix/features/Study_101_Mother_Blood_Collection_Times_mm.txt", sep="\t",
header=TRUE, check.names=FALSE, as.is=TRUE)
blood.df = data.frame(blood)
colnames(blood.df)
blood = read.table("./FeatureMatrix/features/Study_101_Mother_Blood_Collection_Times_mm.txt", sep="\t",
header=TRUE, check.names=FALSE, as.is=TRUE)
blood.df = data.frame(blood)
colnames(blood.df)
?read.table
head(colnamed(blood.df))
head(colnames(blood.df))
head(colnames(blood_draw_times.df))
blood = read.delim("./FeatureMatrix/features/Study_101_Mother_Blood_Collection_Times_mm.txt", sep="\t",
header=TRUE, check.names=FALSE, as.is=TRUE)
blood.df = data.frame(blood)
colnames(blood.df)
blood_draw_times.df = data.frame(lapply(strsplit(as.character(blood.df), " "), function(x) x[2]))
colnames(blood_draw_times.df) = colnames(blood.df)
head(colnames(blood.df))
head(colnames(blood_draw_times.df))
blood = read.csv("./FeatureMatrix/features/Study_101_Mother_Blood_Collection_Times_mm.txt", sep="\t",
header=TRUE, check.names=FALSE, as.is=TRUE)
blood.df = data.frame(blood)
colnames(blood.df)
blood = read.csv("./FeatureMatrix/features/Study_101_Mother_Blood_Collection_Times_mm.txt", sep="\t",
header=TRUE, check.names=FALSE)
blood.df = data.frame(blood)
colnames(blood.df)
blood = read.csv("./FeatureMatrix/features/Study_101_Mother_Blood_Collection_Times_mm.txt", sep="\t",
header=TRUE, check.names=FALSE, as.is=TRUE)
blood = read.csv("./FeatureMatrix/features/Study_101_Mother_Blood_Collection_Times_mm.txt", sep="\t",
header=TRUE, as.is=TRUE, check.names=FALSE)
blood.df = data.frame(blood)
colnames(blood.df)
as.character(colnames(blood.df))
blood = read.csv("./FeatureMatrix/features/Study_101_Mother_Blood_Collection_Times_mm.txt", sep="\t",
header=TRUE, as.is=TRUE, check.names=FALSE, colClasses=as.character)
strsplit(as.character(colnames(blood.df)), "x")
gsub("x", "", as.character(colnames(blood.df)))
?substring
substring("x", colnames(blood.df))
substring("x", colnames(blood.df), 1)
blood = read.csv("./FeatureMatrix/features/Study_101_Mother_Blood_Collection_Times_mm.txt", sep="\t",
header=TRUE, as.is=TRUE, check.names=F)
blood.df = data.frame(blood)
head(colnames(blood.df))
colnames(blood_draw_times.df) <- gsub("x", "x", colnames(blood_draw_times.df))
head(colnames(blood_draw_times.df))
colnames(blood_draw_times.df) <- gsub("x", "", colnames(blood_draw_times.df))
head(colnames(blood_draw_times.df))
colnames(blood_draw_times.df) <- gsub("^x", "", colnames(blood_draw_times.df))
head(colnames(blood_draw_times.df))
colnames(blood_draw_times.df) <- gsub("^x*", "", colnames(blood_draw_times.df))
head(colnames(blood_draw_times.df))
blood = read.table("./FeatureMatrix/features/Study_101_Mother_Blood_Collection_Times_mm.txt", sep="\t",
header=TRUE, as.is=TRUE, check.names=F)
blood.df = data.frame(blood)
head(colnames(blood.df))
times.df = data.frame(lapply(strsplit(as.character(blood.df), " "), function(x) x[2]))
class(colnames(times.df))
colnames(times.df) = gsub("x", "", as.character(colnames(times.df)))
head(colnames(times.df))
times.df = data.frame(lapply(strsplit(as.character(blood.df), " "), function(x) x[2]))
head(colnames(times.df))
colnames(times.df) = colnames(blood.df)
head(colnames(times.df))
colnames(times.df) = gsub("x", "", as.character(colnames(times.df)))
head(colnames(times.df))
colnames(times.df) = gsub("^x", "", as.character(colnames(times.df)))
head(colnames(times.df))
blood = read.csv("./FeatureMatrix/features/Study_101_Mother_Blood_Collection_Times_mm.txt", sep="\t",
header=TRUE, as.is=TRUE, check.names=FALSE)
blood.df = data.frame(blood)
head(colnames(blood.df))
colnames(times.df) = sub("^x", "", as.character(colnames(times.df)))
head(colnames(times.df))
colnames(times.df) = sub("x", "", as.character(colnames(times.df)))
head(colnames(times.df))
lapply(colnames(times.df), gsub, "x", "")
lapply(colnames(times.df), sub, "x", "")
lapply(as.character(colnames(times.df)), sub, "x", "")
lapply(as.character(colnames(times.df)), strsplit, "x")
lapply(strsplit(as.character(colnames(times.df)), "x"))
lapply(strsplit(as.character(colnames(times.df), "x"))
lapply(strsplit(as.character(colnames(times.df), "x")))
lapply(strsplit(as.character(colnames(times.df), "x")))
lapply(strsplit(as.character(colnames(times.df)), "x"))
lapply(strsplit(as.character(colnames(times.df)), "x"), function(x) x[2])
head(colnames(blood.df))
blood = read.csv("./FeatureMatrix/features/Study_101_Mother_Blood_Collection_Times_mm.txt",
sep="\t", header=TRUE, as.is=TRUE, check.names=FALSE)
blood.df = data.frame(blood)
head(colnames(blood.df))
blood = read.csv("./FeatureMatrix/features/Study_101_Mother_Blood_Collection_Times_mm.txt",
sep="\t", header=TRUE, as.is=TRUE, check.names=FALSE)
head(colnames(blood.df))
blood.df = data.frame(blood, check.names=FALSE)
head(colnames(blood.df))
times.df = data.frame(lapply(strsplit(as.character(blood.df), " "), function(x) x[2]))
colnames(times.df) = colnames(blood.df)
head(colnames(times.df))
write.csv(times.df, "./FeatureMatrix/features/Study_101_Mother_Blood_collection_hour.txt")
write.csv(times.df, "./FeatureMatrix/features/Study_101_Mother_Blood_collection_hour.txt",
sep="\t", quote=FALSE)
write.csv(times.df, "./FeatureMatrix/features/Study_101_Mother_Blood_collection_hour.txt",
sep="\t", quote=FALSE)
write.csv(times.df, "./FeatureMatrix/features/Study_101_Mother_Blood_collection_hour.txt",
sep="/t", quote=FALSE)
write.csv(times.df, "./FeatureMatrix/features/Study_101_Mother_Blood_collection_hour.txt",
sep="/t", quote=FALSE)
write.table(times.df, "./FeatureMatrix/features/Study_101_Mother_Blood_collection_hour.txt",
sep="/t", quote=FALSE)
write.table(times.df, "./FeatureMatrix/features/Study_101_Mother_Blood_collection_hour.txt",
sep="\t", quote=FALSE)
head(colnames(blood.df))
head(colnames(blood.df)[,c(-1)])
head(colnames(blood.df)[-1])
times.df = data.frame(lapply(strsplit(as.character(blood.df)[-1], " "), function(x) x[2]))
colnames(times.df) = colnames(blood.df)
head(colnames(times.df))
colnames(times.df) = colnames(blood.df)[-1]
head(colnames(times.df))
test = cbind(blood.df[1], times.df)
head(colnames(test))
test
times.df = cbind(blood.df[1], times.df)
write.table(times.df, "./FeatureMatrix/features/Study_101_Mother_Blood_collection_hour.txt",
sep="\t", quote=FALSE)
write.table(times.df, "./FeatureMatrix/features/Study_101_Mother_Blood_collection_hour.txt",
sep="\t", quote=FALSE)
head(colnames(blood.df))
times.df = data.frame(lapply(strsplit(as.character(blood.df)[-1], " "), function(x) x[2]))
times.df
colnames(times.df) = colnames(blood.df)[-1]
head(colnames(times.df))
blood.df[1]
as.character(blood.df[1])
times.df$Subject ID = as.character(blood.df[1])
times.df$Subject\ ID = as.character(blood.df[1])
times.df = data.frame(lapply(strsplit(as.character(blood.df)[-1], " "), function(x) x[2]))
times.df = cbind(blood.df[1], times.df)
colnames(times.df) = colnames(blood.df)[-1]
head(colnames(times.df))
times.df = data.frame(lapply(strsplit(as.character(blood.df)[-1], " "), function(x) x[2]))
times.df = cbind(blood.df[1], times.df)
colnames(times.df) = colnames(blood.df)
head(colnames(times.df))
write.table(times.df, "./FeatureMatrix/features/Study_101_Mother_Blood_collection_hour.txt",
sep="\t", quote=FALSE)
write.table(times.df, "./FeatureMatrix/features/Study_101_Mother_Blood_collection_hour.txt",
sep="\t", quote=FALSE, row.names=FALSE)
write.table(times.df, "./FeatureMatrix/features/Study_101_Mother_Blood_collection_hour.txt",
sep="\t", quote=FALSE, row.names=FALSE)
install. packages("dplyr")
install. packages("dplyr")
install.packages("dplyr")
library(dplyr)
library(downloader)
install.packages("downloader")
library(downloader)
url <- "https://raw.githubusercontent.com/genomicsclass/dagdata/master/inst/extdata/msleep_ggplot2.csv"
filename <- "msleep_ggplot2.csv"
if (!file.exists(filename)) download(url,filename)
msleep <- read.csv("msleep_ggplot2.csv")
head(msleep)
sleepData <- select(msleep, name, sleep_total)
class(sleepData)
head(sleepData)
head(select(msleep, -name))
head(select(msleep, name:order))
head(select(msleep, starts_with("sl")))
filter(msleep, sleep_total >= 16)
filter(msleep, sleep_total, bodywt >=1)
filter(msleep, sleep_total >=16, bodywt >=1)
head(select(msleep, name, sleep_total))
msleep %>%
select(name, sleep_total) %>%
head
msleep %>% arrange(order) %>% head
msleep %>%
selec(name, order, sleep_total) %>%
arrange(order, sleep_total) %>%
head
msleep %>%
select(name, order, sleep_total) %>%
arrange(order, sleep_total) %>%
head
msleep %>%
select(name, order, sleep_total) %>%
arrange(order, sleep_total) %>%
filter(sleep_total >= 16)
msleep %>%
select(name, order, sleep_total) %>%
arrange(order, desc(sleep_total)) %>%
filter(sleep_total >= 16)
msleep %>%
mutate(rem_proportion = sleep_rem/sleep_total) %>%
head
msleep %>%
mutate(rem_proportion = sleep_rem/sleep_total,
bodywt_grams = bodywt * 1000) %>%
head
msleep %>%
summarise(avg_sleep = mean(sleep_total)) %>%
head
msleep %>%
summarise(avg_sleep = mean(sleep_total),
max_sleep = max(sleep_total))
summarise(avg_sleep = mean(sleep_total),
max_sleep = max(sleep_total),
min_sleep = min(sleep_total))
msleep %>%
summarise(avg_sleep = mean(sleep_total),
max_sleep = max(sleep_total),
min_sleep = min(sleep_total))
msleep %>%
group_by(order) %>%
summarise(avg_sleep = mean(sleep_total),
min_sleep = min(sleep_total),
max_sleep = max(sleep_total),
total = n())
)
msleep %>%
group_by(order) %>%
summarise(avg_sleep = mean(sleep_total),
min_sleep = min(sleep_total),
max_sleep = max(sleep_total),
total = n())
library(devtools)
install_github("genomicsclass/GSE5859Subset")
library(GSE5859Subset)
data(GSE5859Subset) ##this loads the three tables
head(data)
head(GSE5859Subset)
GSE5859Subset
library(dplyr)
head(sampleInfo)
filter(sampleInfo, date=2005-06-27)
filter(sampleInfo, date="2005-06-27")
class(sampleInfo$date)
dim(sampleInfo[which(sampleInfo$date == "2005-06-27")]
dim(sampleInfo[which(sampleInfo$date == "2005-06-27")])
dim(sampleInfo[which(sampleInfo$date == "2005-06-27")])
dim(sampleInfo[which(sampleInfo$date == "2005-06-27"),])
head(geneAnnotation)
dim(geneAnnotation[which(geneAnnotation$CHR == "Y"),])
dim(geneAnnotation[which(geneAnnotation$CHR == "chr Y"),])
dim(geneAnnotation[grep("Y", geneAnnotation$CHR),])
head(geneExpression)
grep("APRC1A", geneExpression)
head(geneAnnotation)
head(geneExpression)
head(sampleInfo)
library(RODBC)
install.packages(RODBC)
install.packages('RODBC')
channel <- odbcConnect("glados19")
library(RODBC)
channel <- odbcConnect("glados19")
channel <- odbcConnect("impala")
library(RImpala)
install.packages('rJava')
library(RCurl)
library(RImpala)
install.packages('RImpala')
library(RImpala)
install.packages('rJava')
library(RImpala)
library(Rjava)
library(rJava)
system(paste("sudo R CMD javareconf"), wait=TRUE)
doc = xmlParse(system.file("D:\Documents/GitHub/impala_annot/ref_db/uniprot_sprot.xml",
package = "XML"))
library(XML)
doc = xmlParse(system.file("D:\Documents/GitHub/impala_annot/ref_db/uniprot_sprot.xml",
doc = xmlParse(system.file("/D/Documents/GitHub/impala_annot/ref_db/uniprot_sprot.xml",
package = "XML"))
doc = "/D/Documents/GitHub/impala_annot/ref_db/uniprot_sprot.xml"
doc = "/D/Documents/GitHub/impala_annot/ref_db/uniprot_sprot.xml"
invisible(xmlTreeParse(doc,
handlers=list(entity=function(x) {
cat("In entity",x$name, x$value,"\n")
x}
), asTree = TRUE
)
)
url = "ftp://ftp.uniprot.org/pub/databases/uniprot/current_release/knowledgebase/taxonomic_divisions/uniprot_sprot_human.dat.gz"
invisible(xmlTreeParse(url, asText=TRUE,
handlers=list(entity=function(x) {
cat("In entity",x$name, x$value,"\n")
x}
), asTree = TRUE
)
)
url = "ftp://ftp.uniprot.org/pub/databases/uniprot/current_release/knowledgebase/taxonomic_divisions/uniprot_sprot_human.xml.gz"
invisible(xmlTreeParse(url, asText=TRUE,
handlers=list(entity=function(x) {
cat("In entity",x$name, x$value,"\n")
x}
), asTree = TRUE
)
)
suppressMessages(library(RODBC))
#connect using the DSN name you created on your machine
conn <- odbcConnect("Impala DSN")
vcf = sqlFetch(conn, "p7dev.cgi_test")
head(vcf)
dim(vcf)
ens = sqlFetch(conn, "p7dev.ensembl_test")
head(ens)
dim(ens)
intergenic_csv = read.csv("D:/Documents/GitHub/impala_scripts/queries/testing/ensembl/intergenic_cgi.csv", header=TRUE)
head(intergenic_csv)
rand_intergenic = intergenic_csv[sample(unique(c(intergenic_csv$sample_id)), 5),]
rand_intergenic
suppressMessages(library(VariantAnnotation))
suppressMessages(library(AnnotationHub))
suppressMessages(library(TxDb.Hsapiens.UCSC.hg19.knownGene))
install.packages("TxDb.Hsapiens.UCSC.hg19.knownGene")
suppressMessages(library(TxDb.Hsapiens.UCSC.hg19.knownGene))
source("http://bioconductor.org/biocLite.R")
biocLite("TxDb.Hsapiens.UCSC.hg19.knownGene")
suppressMessages(library(TxDb.Hsapiens.UCSC.hg19.knownGene))
txdb_hg19 <- TxDb.Hsapiens.UCSC.hg19.knownGene
head(seqlevels(txdb_hg19))
seqlevels(rand_intergenic)
head(rand_intergenic)
not_genes = vars = with(rand_genes, GRanges(seqnames=chromosome,
ranges=IRanges(start, stop,
names=paste(sample_id, ":",reference, ">", allele1seq, sep="")),zygosity=zygosity, vartype=vartype,
read_count = totalreadcount,
sample_id = sample_id))
not_genes = vars = with(rand_intergenic, GRanges(seqnames=chromosome,
ranges=IRanges(start, stop,
names=paste(sample_id, ":",reference, ">", allele1seq, sep="")),zygosity=zygosity, vartype=vartype,
read_count = totalreadcount,
sample_id = sample_id))
not_genes
seqlevels(not_genes)
head(seqlevels(txdb_hg19))
seqlevels(not_genes) < paste0("chr", seqlevels(not_genes))
not_genes
seqlevels(not_genes)
head(seqlevels(txdb_hg19))
seqlevels(not_genes) <- paste0("chr", seqlevels(not_genes))
not_genes
genome(not_genes) = "hg19"
rowData(not_genes)
ranges(not_genes)
locateVariants(ranges(not_genes), txdb_hg19, AllVariants())
locateVariants(not_genes, txdb_hg19, AllVariants())
table(match.df$zygosity)
table(match.df$zygosity)
suppressMessages(library(GenomicRanges))
suppressMessages(library(IRanges))
##subset for only vcf rows that have high quality alt1allele and read count > 30
vcf_pass = vcf[which(vcf$allele1varquality == "VQHIGH" & vcf$totalreadcount > 30),]
#create GRanges objects for comparison
vars = with(vcf_pass, GRanges(seqnames=vcf_pass$chromosome,
ranges=IRanges(vcf_pass$start, vcf_pass$stop,
names=paste(vcf_pass$sample_id, ":",vcf_pass$reference, ">", vcf_pass$allele1seq, sep="")),zygosity=vcf_pass$zygosity, vartype=vcf_pass$vartype,
read_count = vcf_pass$totalreadcount,
sample_id = vcf_pass$sample_id))
genes = with(ens, GRanges(seqnames=ens$chromosome,
ranges=IRanges(ens$start, ens$stop,names=ens$gene_id),
feature=ens$feature, trans_id=ens$transcript_id, gene_id=ens$gene_id, gene_name=ens$gene_name, trans_name=ens$transcript_name, exon=ens$exon_id))
##find variants that fall in gene regions
match = suppressWarnings(findOverlaps(vars, genes))
##turn results into a data frame
match.df = data.frame(sample_id = mcols(vars)$sample_id[queryHits(match)],
chrom = seqnames(vars)[queryHits(match)],
start = as.data.frame(ranges(vars))$start[queryHits(match)],
end = as.data.frame(ranges(vars))$end[queryHits(match)],
variant = as.character(lapply(strsplit(as.character(names(vars)[queryHits(match)]), ":"), function(x) x[2])),
vartype = as.character(mcols(vars)$vartype)[queryHits(match)],
zygosity = as.character(mcols(vars)$zygosity)[queryHits(match)],
read_count = as.character(mcols(vars)$read_count)[queryHits(match)],
gene_name = mcols(genes)$gene_name[subjectHits(match)],
gene_id = names(genes)[subjectHits(match)],
trans_name = mcols(genes)$trans_name[subjectHits(match)],
trans_id = mcols(genes)$trans_id[subjectHits(match)],
exon_id = mcols(genes)$exon[subjectHits(match)],
feature = mcols(genes)$feature[subjectHits(match)],
stringsAsFactors=F)
#82 rows, same as impala query
head(match.df)
dim(match.df)
#add variant column to impala results
ens_results$variant = paste(ens_results$cgi_ref, ">", ens_results$cgi_alt1, sep="")
#coerce to same structure as match.df for comparison
ens.df = ens_results[c(1:4,23,10,6,12,16,17,19,20,21,15)]
colnames(ens.df) = colnames(match.df)
#order both data frames for matching
ens.df = ens.df[with(ens.df, order(sample_id, chrom, start, end, variant, gene_name, gene_id, trans_name, trans_id, exon_id, feature)),]
match.df = match.df[with(match.df, order(sample_id, chrom, start, end, variant, gene_name, trans_name, trans_id, exon_id, feature)),]
#coercing columns to same class for comparison
i = sapply(ens.df, is.factor)
ens.df[i] = lapply(ens.df[i], as.character)
j = sapply(match.df, is.factor)
match.df[j] = lapply(match.df[j], as.character)
#removing rownames for matching
rownames(match.df)= NULL
rownames(ens.df) = NULL
ens_results$variant = paste(ens_results$cgi_ref, ">", ens_results$cgi_alt1, sep="")
ens_results = read.csv("D:/Documents/GitHub/impala_scripts/queries/testing/ensembl/cgi_results.csv", header=TRUE)
#add variant column to impala results
ens_results$variant = paste(ens_results$cgi_ref, ">", ens_results$cgi_alt1, sep="")
#coerce to same structure as match.df for comparison
ens.df = ens_results[c(1:4,23,10,6,12,16,17,19,20,21,15)]
colnames(ens.df) = colnames(match.df)
#order both data frames for matching
ens.df = ens.df[with(ens.df, order(sample_id, chrom, start, end, variant, gene_name, gene_id, trans_name, trans_id, exon_id, feature)),]
match.df = match.df[with(match.df, order(sample_id, chrom, start, end, variant, gene_name, trans_name, trans_id, exon_id, feature)),]
#coercing columns to same class for comparison
i = sapply(ens.df, is.factor)
ens.df[i] = lapply(ens.df[i], as.character)
j = sapply(match.df, is.factor)
match.df[j] = lapply(match.df[j], as.character)
#removing rownames for matching
rownames(match.df)= NULL
rownames(ens.df) = NULL
which(match.df != ens.df, arr.ind=TRUE)
table(ens_results$cgi_zygosity)
table(match.df$zygosity)
setwd("~/GitHub/impala_scripts/queries/testing")
ens_results = read.csv("D:/Documents/GitHub/impala_scripts/queries/testing/ensembl/ensembl_query_result.csv", header=TRUE)
intergenic_csv = read.csv("D:/Documents/GitHub/impala_scripts/queries/testing/ensembl/intergenic_test.csv", header=TRUE)
suppressMessages(library(VariantAnnotation))
suppressMessages(library(AnnotationHub))
suppressMessages(library(TxDb.Hsapiens.UCSC.hg19.knownGene))
not_genes = vars = with(rand_intergenic, GRanges(seqnames=chromosome,
ranges=IRanges(start, stop,
names=paste(sample_id, ":",reference, ">", allele1seq, sep="")),zygosity=zygosity, vartype=vartype,
read_count = totalreadcount,
sample_id = sample_id))
head(not_genes)
not_genes = with(rand_intergenic, GRanges(seqnames=chromosome,
ranges=IRanges(start, stop,
names=paste(sample_id, ":",reference, ">", allele1seq, sep="")),zygosity=zygosity, vartype=vartype,
read_count = totalreadcount,
sample_id = sample_id))
rand_illumina_intergenic = intergenic_csv[sample(unique(c(intergenic_csv$sample_id)), 5),]
intergenic_csv = read.csv("D:/Documents/GitHub/impala_scripts/queries/testing/ensembl/intergenic_test.csv", header=TRUE)
head(intergenic_csv)
intergenic_csv = read.csv("D:/Documents/GitHub/impala_scripts/queries/testing/ensembl/intergenic_test.csv", header=TRUE)
head(intergenic_csv)
rand_ill_intergenic = intergenic_csv[sample(unique(c(intergenic_csv$sample_id)), 5),]
rand_ill_intergenic
txdb_hg19 <- TxDb.Hsapiens.UCSC.hg19.knownGene
not_genes = with(rand_ill_intergenic, GRanges(seqnames=chromosome,
ranges=IRanges(position, width=1,
names=paste(sample_id, ":",reference, ">", alt, sep="")),
rsID = id,
sample_id = sample_id))
not_genes = with(rand_ill_intergenic, GRanges(seqnames=chromosome,
ranges=IRanges(position, width=1,
names=paste(sample_id, ":",ref, ">", alt, sep="")),
rsID = id,
sample_id = sample_id))
head(seqlevels(txdb_hg19))
seqlevels(not_genes)
seqlevels(not_genes) <- paste0("chr", seqlevels(not_genes))
not_genes
genome(not_genes) = "hg19"
locateVariants(not_genes, txdb_hg19, AllVariants())
setwd("~/GitHub/impala_scripts/queries")
